
assignment_nymble.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000228  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be6  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e4  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022b  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.uart_init 00000016  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.uart_transmit 0000000e  0000011e  0000011e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.uart_receive 0000000e  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.store_data_in_eeprom 00000006  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.read_data_from_eeprom 0000000a  0000013a  0000013a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000044  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.avrlibc 00000012  0000010c  0000010c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.avrlibc 0000001c  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000014a <__bad_interrupt>:
 14a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.uart_init:

000000e0 <uart_init>:
#define F_CPU 16000000UL
#define BAUD 2400
#define MYUBRR F_CPU/16/BAUD-1

void uart_init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
  e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  f4:	08 95       	ret

Disassembly of section .text.uart_transmit:

0000011e <uart_transmit>:
}

void uart_transmit(unsigned char data){
	while (!(UCSR0A & (1 << UDRE0)));
 11e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 122:	95 ff       	sbrs	r25, 5
 124:	fc cf       	rjmp	.-8      	; 0x11e <uart_transmit>
	UDR0 = data;
 126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12a:	08 95       	ret

Disassembly of section .text.uart_receive:

0000012c <uart_receive>:
}

unsigned char uart_receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 12c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <uart_receive>
	return UDR0;
 134:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 138:	08 95       	ret

Disassembly of section .text.store_data_in_eeprom:

00000144 <store_data_in_eeprom>:


void store_data_in_eeprom(uint16_t addr, uint8_t data) {
	eeprom_write_byte((uint8_t*)addr, data);
 144:	0e 94 62 00 	call	0xc4	; 0xc4 <eeprom_write_byte>
 148:	08 95       	ret

Disassembly of section .text.read_data_from_eeprom:

0000013a <read_data_from_eeprom>:
}

uint8_t read_data_from_eeprom(uint16_t addr) {
	return eeprom_read_byte((uint8_t*)addr);
 13a:	bc 01       	movw	r22, r24
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 86 00 	call	0x10c	; 0x10c <eeprom_read_byte>
}
 142:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

int main(void) {
	uart_init(MYUBRR);
  80:	8f e9       	ldi	r24, 0x9F	; 159
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <uart_init>

	while(1){
		
		uint16_t eeprom_addr = 0;
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d0 e0       	ldi	r29, 0x00	; 0
		char data;
		while(1){
			data = uart_receive();
  8c:	0e 94 96 00 	call	0x12c	; 0x12c <uart_receive>
  90:	18 2f       	mov	r17, r24
			
			store_data_in_eeprom(eeprom_addr++, data);
  92:	7e 01       	movw	r14, r28
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	e8 1a       	sub	r14, r24
  98:	f8 0a       	sbc	r15, r24
  9a:	61 2f       	mov	r22, r17
  9c:	ce 01       	movw	r24, r28
  9e:	0e 94 a2 00 	call	0x144	; 0x144 <store_data_in_eeprom>
  a2:	e7 01       	movw	r28, r14
			if(data == '\n'){
  a4:	1a 30       	cpi	r17, 0x0A	; 10
  a6:	91 f7       	brne	.-28     	; 0x8c <main+0xc>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
			}
		}

		eeprom_addr = 0;
		while(1){
			data = read_data_from_eeprom(eeprom_addr++);
  ac:	8c 01       	movw	r16, r24
  ae:	0f 5f       	subi	r16, 0xFF	; 255
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
  b2:	0e 94 9d 00 	call	0x13a	; 0x13a <read_data_from_eeprom>
  b6:	c8 2f       	mov	r28, r24
			uart_transmit(data);
  b8:	0e 94 8f 00 	call	0x11e	; 0x11e <uart_transmit>
			}
		}

		eeprom_addr = 0;
		while(1){
			data = read_data_from_eeprom(eeprom_addr++);
  bc:	c8 01       	movw	r24, r16
			uart_transmit(data);
			if(data == '\n'){
  be:	ca 30       	cpi	r28, 0x0A	; 10
  c0:	a9 f7       	brne	.-22     	; 0xac <main+0x2c>
  c2:	e2 cf       	rjmp	.-60     	; 0x88 <main+0x8>

Disassembly of section .text.__dummy_fini:

00000152 <_fini>:
 152:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000154 <__funcs_on_exit>:
 154:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000156 <__simulator_exit>:
 156:	08 95       	ret

Disassembly of section .text.exit:

000000f6 <exit>:
  f6:	ec 01       	movw	r28, r24
  f8:	0e 94 aa 00 	call	0x154	; 0x154 <__funcs_on_exit>
  fc:	0e 94 a9 00 	call	0x152	; 0x152 <_fini>
 100:	ce 01       	movw	r24, r28
 102:	0e 94 ab 00 	call	0x156	; 0x156 <__simulator_exit>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 a7 00 	call	0x14e	; 0x14e <_Exit>

Disassembly of section .text._Exit:

0000014e <_Exit>:
 14e:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>

Disassembly of section .text.avrlibc:

0000010c <eeprom_read_byte>:
 10c:	cb 01       	movw	r24, r22
 10e:	f9 99       	sbic	0x1f, 1	; 31
 110:	fe cf       	rjmp	.-4      	; 0x10e <eeprom_read_byte+0x2>
 112:	92 bd       	out	0x22, r25	; 34
 114:	81 bd       	out	0x21, r24	; 33
 116:	f8 9a       	sbi	0x1f, 0	; 31
 118:	99 27       	eor	r25, r25
 11a:	80 b5       	in	r24, 0x20	; 32
 11c:	08 95       	ret

Disassembly of section .text.avrlibc:

000000c4 <eeprom_write_byte>:
  c4:	26 2f       	mov	r18, r22

000000c6 <eeprom_write_r18>:
  c6:	f9 99       	sbic	0x1f, 1	; 31
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <eeprom_write_r18>
  ca:	1f ba       	out	0x1f, r1	; 31
  cc:	92 bd       	out	0x22, r25	; 34
  ce:	81 bd       	out	0x21, r24	; 33
  d0:	20 bd       	out	0x20, r18	; 32
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	fa 9a       	sbi	0x1f, 2	; 31
  d8:	f9 9a       	sbi	0x1f, 1	; 31
  da:	0f be       	out	0x3f, r0	; 63
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	08 95       	ret
